#!/bin/bash
set -e

# Colors for messages
RED=$'\033[0;31m'
GREEN=$'\033[0;32m'
ORANGE=$'\033[0;33m'
NOCOLOR=$'\033[0m'

HOOK_PATH="$(pwd)/scripts/hooks/pre-push-tf"

echo "Starting terraform validation hook tests..."

TMP_REPO=$(mktemp -d)
echo "Created temp repo at $TMP_REPO"
cd "$TMP_REPO"

# Initialize empty git repo
git init -q

# Setup terraform directory and example files
mkdir terraform

# Add a well-formed Terraform file and commit
cat <<EOF > terraform/valid.tf
resource "null_resource" "example_valid" {}
EOF
git add terraform/valid.tf
git commit -m "Add valid terraform file" -q

# Copy the pre-push-tf hook and make executable
mkdir -p .git/hooks
cp "$HOOK_PATH" .git/hooks/pre-push-tf
chmod +x .git/hooks/pre-push-tf

# Simulate push by invoking hook with dummy refs
simulate_push() {
  local_ref=$(git rev-parse --abbrev-ref HEAD)
  local_sha=$(git rev-parse HEAD)
  remote_ref="refs/heads/main"
  remote_sha="0000000000000000000000000000000000000000"
  echo "$local_ref $local_sha $remote_ref $remote_sha" | .git/hooks/pre-push-tf
}

# Test 1: Valid terraform config 
echo "Test 1: Valid Terraform config"

if simulate_push; then
  echo "${GREEN}PASS: Push succeeded with valid terraform config"
else
  echo "${RED}FAIL: Push blocked unexpectedly for valid terraform"
  exit 1
fi

# Test 2: Invalid terraform config 
cat <<EOF > terraform/invalid.tf
resource "aws_instance" "example_invalid" {
  ami = "ami-123456"
  instance_type = "t2.micro"
  invalid_attribute = "this_should_fail"
}
EOF
git add terraform/invalid.tf
git commit -m "Add invalid terraform file" -q

echo "Test 2: Invalid Terraform config"

if simulate_push; then
  echo "${RED}FAIL: Push succeeded but should have been blocked due to terraform validate"
  exit 1
else
  echo "${GREEN}PASS: Push blocked as expected due to terraform validate failure"
fi

echo "All validation tests completed."
