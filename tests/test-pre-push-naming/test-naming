#!/usr/bin/env bash
set -euo pipefail

# Colors for messages
RED=$'\033[0;31m'
GREEN=$'\033[0;32m'
ORANGE=$'\033[0;33m'
NOCOLOR=$'\033[0m'

# Import test utilities
# shellcheck source=/dev/null
source "$(dirname "${BASH_SOURCE[0]}")/../common/test-utils"

HOOK_NAME="pre-push-naming"
HOOK_PATH="$PROJECT_ROOT/hooks/$HOOK_NAME"
BRANCH_FILE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/test-data/test-branch-names.txt"

echo "Starting pre-push-naming hook tests..."

# Create a temp repo with main branch + hook installed
TMP_REPO=$(create_temp_git_repo)
cd "$TMP_REPO"
echo "Created temp repo at $TMP_REPO"

echo "init" > README.md
git add README.md
git commit -m "Initial commit" >/dev/null

install_hook "$HOOK_NAME"

# Simulate push by invoking the hook manually
simulate_push() {
  local branch="$1"
  git checkout -b "$branch" -q || git checkout "$branch" -q

  echo "test" > test.txt
  git add test.txt
  git commit -m "test commit" -q

  local_ref=$(git rev-parse --abbrev-ref HEAD)
  local_sha=$(git rev-parse HEAD)
  remote_ref="refs/heads/main"
  remote_sha="0000000000000000000000000000000000000000"

  echo "$local_ref $local_sha $remote_ref $remote_sha" | .git/hooks/pre-push-naming
}

# Run a single test
run_test() {
  local branch="$1"
  local expect="$2"

  echo "Testing branch: $branch (expecting exit code $expect)"
  if output=$(simulate_push "$branch"); then
    if [[ "$expect" -eq 0 ]]; then
      echo -e "${GREEN}PASS: Allowed as expected${NOCOLOR}"
    else
      echo -e "${RED}FAIL: Should have been rejected${NOCOLOR}"
      exit 1
    fi
  else
    if [[ "$expect" -ne 0 ]]; then
      # Extra check: error message should not be empty
      if [[ -z "$output" ]]; then
        echo -e "${RED}FAIL: Rejected but no error message printed${NOCOLOR}"
        exit 1
      fi
      echo -e "${GREEN}PASS: Rejected as expected, with message:${NOCOLOR}"
      echo "$output"
    else
      echo -e "${RED}FAIL: Should have been allowed${NOCOLOR}"
      exit 1
    fi
  fi

  git checkout main -q
  git branch -D "$branch" -q
  rm -f test.txt
  echo
}

# Run all tests from branch file
while IFS= read -r line; do
  [[ -z "$line" || "$line" =~ ^# ]] && continue
  branch=$(echo "$line" | awk '{print $1}')
  expect=$(echo "$line" | awk '{print $2}')
  run_test "$branch" "$expect"
done < "$BRANCH_FILE"

echo "${GREEN}All naming tests completed successfully.${NOCOLOR}"