#!/usr/bin/env bash
set -e

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
NOCOLOR='\033[0m'

echo "Starting prepare-commit-msg hook tests..."

# Path to test data
TEST_DATA_FILE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/test-data/test-commit-messages.txt"

# Load test utils
source "$(dirname "${BASH_SOURCE[0]}")/../common/test-utils"

HOOK_PATH="$(pwd)/hooks/prepare-commit-msg"

# Create temp repo and install hook
TMP_REPO=$(create_temp_git_repo)
echo "Created temp repo at: $TMP_REPO"
cd "$TMP_REPO"

HOOK_NAME="prepare-commit-msg"
install_hook "$HOOK_NAME"

# Record the base branch (whatever git init defaulted to)
echo "init" > README.md
git add README.md
git commit -m "initial" -q
BASE_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Function to run individual tests
run_test() {
  local branch_name="$1"
  local commit_msg="$2"
  local expected_msg="$3"
  local commit_source="$4"

  echo "Testing on branch: $branch_name (source: ${commit_source:-normal})"
  git checkout -b "$branch_name" -q

  echo "console.log('hello');" > test.js
  git add test.js

  # Simulate commit with commit source (in case squash or merge)
  if [[ -n "$commit_source" ]]; then
    TEST_COMMIT_SOURCE="$commit_source" \
      GIT_EDITOR=true git commit -m "$commit_msg" --quiet
  else
    GIT_EDITOR=true git commit -m "$commit_msg" --quiet
  fi

  final_msg=$(git log -1 --pretty=%B)
  echo "Final commit message: '$final_msg'"

  if [[ "$final_msg" == "$expected_msg" ]]; then
    echo -e "${GREEN}PASS${NOCOLOR}"
  else
    echo -e "${RED}FAIL - expected: '$expected_msg'${NOCOLOR}"
    exit 1
  fi

  # Cleanup
  git checkout main -q
  git branch -D "$branch_name" -q
  rm -f test.js
  echo
}

# Loop through each line in test data
while IFS="|" read -r branch commit expected source; do
  # Skip comments and blanks
  [[ -z "$branch" || "$branch" =~ ^# ]] && continue
  run_test "$branch" "$commit" "$expected" "$source"
done < "$TEST_DATA_FILE"

echo -e "${GREEN} All tests passed successfully.${NOCOLOR}"